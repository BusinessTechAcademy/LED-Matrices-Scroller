# SPDX-FileCopyrightText: 2020 John Park for Adafruit Industries
#
# SPDX-License-Identifier: MIT

# Quote board matrix display
# uses AdafruitIO to serve up a quote text feed and color feed
# random quotes are displayed, updates periodically to look for new quotes
# avoids repeating the same quote twice in a row

import time
import random
import board
import terminalio
from adafruit_matrixportal.matrixportal import MatrixPortal

# --- Display setup ---
matrixportal = MatrixPortal(status_neopixel=board.NEOPIXEL, debug=True)

# Create a new label with the color and text selected
matrixportal.add_text(
    text_font=terminalio.FONT,
    text_position=(0, (matrixportal.graphics.display.height // 2) - 1),
    scrolling=True,
)

# Static 'Connecting' Text
matrixportal.add_text(
    text_font=terminalio.FONT,
    text_position=(2, (matrixportal.graphics.display.height // 2) - 1),
)

matrixportal.set_text("starting", 1)

# FILENAME = ""
# BIT_FEED = "sign-quotes.signbit"
ANIM_FEED = "sign-quotes.signanim"
QUOTES_FEED = "sign-quotes.signtext"
COLORS_FEED = "sign-quotes.signcolor"
SCROLL_DELAY = 0.02
UPDATE_DELAY = 600
# ANIM_STAGE = -1
# CYCLE = 0

# bmps = []
quotes = []
colors = []
anims = []
anim_state = None
last_color = None
last_quote = None


def update_data():
    print("Updating data from Adafruit IO")
    matrixportal.set_text("Connecting", 1)

    try:
        quotes_data = matrixportal.get_io_data(QUOTES_FEED)
        quotes.clear()
        for json_data in quotes_data:
            quotes.append(matrixportal.network.json_traverse(json_data, ["value"]))
        print(quotes)
    # pylint: disable=broad-except
    except Exception as error:
        print(error)
    try:
        color_data = matrixportal.get_io_data(COLORS_FEED)
        colors.clear()
        for json_data in color_data:
            colors.append(matrixportal.network.json_traverse(json_data, ["value"]))
        print(colors)
    # pylint: disable=broad-except
    except Exception as error:
        print(error)
        try:
            anim_data = matrixportal.get_io_data(ANIM_FEED)
            anims.clear()
            for json_data in anim_data:
                anims.append(matrixportal.network.json_traverse(json_data, ["value"]))
            print(anims)
    # pylint: disable=broad-except
        except Exception as error:
            print(error)

    if not quotes or not colors :
        raise RuntimeError("Please add at least one quote and color to your feeds")
    matrixportal.set_text("missing data", 1)


update_data()
last_update = time.monotonic()
matrixportal.set_text(" ", 1)
quote_index = None
color_index = None
# anim_index = None

while True:

    #    if CYCLE > 9:
    #        UPDATE_DELAY = 800
    #        bit_depth = 1
    #        time.sleep(6)
    #        UPDATE_DELAY = 600
    #        bit_depth = 3
    #        CYCLE = CYCLE - 10
    #    else:
    #        UPDATE_DELAY = UPDATE_DELAY
    #    ANIM_STAGE = ANIM_STAGE + 1

    # Choose a random quote from quotes
    if len(quotes) > 1 and last_quote is not None:
        while quote_index == last_quote:
            quote_index = random.randrange(0, len(quotes))
    else:
        quote_index = random.randrange(0, len(quotes))
    last_quote = quote_index

    # Choose a random color from colors
    if len(colors) > 1 and last_color is not None:
        while color_index == last_color:
            color_index = random.randrange(0, len(colors))
    else:
        color_index = random.randrange(0, len(colors))
    last_color = color_index

    #    if len(anims) > 1 and anim_state is not None:
    #        while anim_index == anim_state:
    #            anim_index = random.randrange(0, len(anims))
    #    else:
    #        anim_index = random.randrange(0, len(anims))
    #    animstate = anim_index

    #    if anims == 1:
    #        SCROLL_DELAY = 0.00
    #        matrixportal.set_text(" " + quotes[quote_index])
    #        time.sleep(1)
    #        matrixportal.set_text("|" + quotes[quote_index])
    #        time.sleep(1)
    #        matrixportal.set_text(" " + quotes[quote_index])
    #    if anims == 2:
    #        SCROLL_DELAY = 0.01
    #        matrixportal.set_text(">" + quotes[quote_index])
    #        time.sleep(4)
    #        SCROLL_DELAY = -0.01
    #        matrixportal.set_text("<" + quotes[quote_index])
    #    if anims == 3:
    #        SCROLL_DELAY = 0.00
    #        quotes.replace("A", "4"),   quotes.replace("a", "4")
    #        quotes.replace("E", "3"),   quotes.replace("e", "3")
    #        quotes.replace("I", "1"),   quotes.replace("i", "1")
    #        time.sleep(1)
    #        matrixportal.set_text(quotes[quote_index])
    #    if anims == 4:
    #        SCROLL_DELAY = 0.01
    #        matrixportal.set_text(quotes[quote_index])
    #        quotes.replace(quotes, "xxxxxx")
    #        matrixportal.set_text(quotes[quote_index])
    #        time.sleep(2)
    #        quotes.replace(quotes, last_quote)
    #        matrixportal.set_text(quotes[quote_index])
    #    else:
    #        SCROLL_DELAY = 0.02
    #        matrixportal.set_text(quotes[quote_index])
    #    ANIM_STAGE = ANIM_STAGE - 1

    # Set the text
    matrixportal.set_text(quotes[quote_index])

    # Set the text color
    matrixportal.set_text_color(colors[color_index])

    # Scroll it
    matrixportal.scroll_text(SCROLL_DELAY)

    if time.monotonic() > last_update + UPDATE_DELAY:
        update_data()
#        CYCLE = CYCLE + 1
        last_update = time.monotonic()
